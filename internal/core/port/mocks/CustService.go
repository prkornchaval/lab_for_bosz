// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "labForBosz/internal/core/domain"

	mock "github.com/stretchr/testify/mock"
)

// CustService is an autogenerated mock type for the CustService type
type CustService struct {
	mock.Mock
}

// CreateCustomerAddressFn provides a mock function with given fields: ctx, in
func (_m *CustService) CreateCustomerAddressFn(ctx context.Context, in domain.CreateCustomerAddress) (*int, error) {
	ret := _m.Called(ctx, in)

	var r0 *int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.CreateCustomerAddress) (*int, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.CreateCustomerAddress) *int); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.CreateCustomerAddress) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCustomerAddressTransaction provides a mock function with given fields: ctx, in
func (_m *CustService) CreateCustomerAddressTransaction(ctx context.Context, in domain.CreateCustomerAddress) (*int, error) {
	ret := _m.Called(ctx, in)

	var r0 *int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.CreateCustomerAddress) (*int, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.CreateCustomerAddress) *int); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.CreateCustomerAddress) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCustService interface {
	mock.TestingT
	Cleanup(func())
}

// NewCustService creates a new instance of CustService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCustService(t mockConstructorTestingTNewCustService) *CustService {
	mock := &CustService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
