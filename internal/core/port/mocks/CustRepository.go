// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "labForBosz/internal/core/domain"
	fn "labForBosz/internal/core/domain/fn"

	mock "github.com/stretchr/testify/mock"
)

// CustRepository is an autogenerated mock type for the CustRepository type
type CustRepository struct {
	mock.Mock
}

// CreateAddressTx provides a mock function with given fields: ctx, in
func (_m *CustRepository) CreateAddressTx(ctx context.Context, in domain.Address) error {
	ret := _m.Called(ctx, in)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Address) error); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateCustomerAddressTransactional provides a mock function with given fields: ctx, in, f
func (_m *CustRepository) CreateCustomerAddressTransactional(ctx context.Context, in domain.CreateCustomerAddress, f fn.CreateCustomerAddressFn) (*int, error) {
	ret := _m.Called(ctx, in, f)

	var r0 *int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.CreateCustomerAddress, fn.CreateCustomerAddressFn) (*int, error)); ok {
		return rf(ctx, in, f)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.CreateCustomerAddress, fn.CreateCustomerAddressFn) *int); ok {
		r0 = rf(ctx, in, f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.CreateCustomerAddress, fn.CreateCustomerAddressFn) error); ok {
		r1 = rf(ctx, in, f)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCustomerTx provides a mock function with given fields: ctx, in
func (_m *CustRepository) CreateCustomerTx(ctx context.Context, in domain.Customer) (*int, error) {
	ret := _m.Called(ctx, in)

	var r0 *int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Customer) (*int, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Customer) *int); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Customer) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCustRepository creates a new instance of CustRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCustRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CustRepository {
	mock := &CustRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
